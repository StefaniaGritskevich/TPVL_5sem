const http = require('http');
const fs = require('fs');
const path = require('path');

// Функция для установки заголовков кэширования
function setCacheHeaders(res, cacheParam) {
    switch (cacheParam) {
        case 'no-store':
            res.setHeader('Cache-Control', 'no-store');
            break;
        case 'max-age':
            res.setHeader('Cache-Control', 'max-age=3600');
            break;
        case 'etag':
            const etag = '"12345"';
            res.setHeader('ETag', etag);
            break;
        case 'last-modified':
            res.setHeader('Last-Modified', new Date().toUTCString());
            break;
        case 'expired':
            res.setHeader('Expires', new Date(Date.now() + 3600 * 1000).toUTCString());
            break;
        default:
            res.setHeader('Cache-Control', 'no-cache');
    }
}

const server = http.createServer((req, res) => {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const pathname = url.pathname;
    const cacheParam = url.searchParams.get('cache_param') || 'no-cache';

    if (pathname === '/') {
        const htmlPath = path.join(__dirname, 'index.html');
        fs.readFile(htmlPath, (err, data) => {
            if (err) {
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('HTML file not found');
                return;
            }
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(data);
        });
    } else if (pathname === '/image') {
        const imagePath = path.join(__dirname, 'img.png');
        fs.readFile(imagePath, (err, data) => {
            if (err) {
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('Image not found');
                return;
            }
            setCacheHeaders(res, cacheParam);
            res.writeHead(200, { 'Content-Type': 'image/png' });
            res.end(data);
        });
    } else if (pathname === '/script') {
        const scriptContent = `
            const randomNumber = Math.floor(Math.random() * 1000000000) + 1;
            const newElement = document.createElement('h4');
            newElement.textContent = \`Случайное число: \${randomNumber}\`;
            document.body.appendChild(newElement);
        `;
        setCacheHeaders(res, cacheParam);
        res.writeHead(200, { 'Content-Type': 'application/javascript' });
        res.end(scriptContent);
    } else if (pathname === '/styles') {  // Новый обработчик для CSS
        const cssContent = `
            body {
                font-family: Arial, sans-serif;
                background-color: #f0f0f0;
                color: #333;
            }
            h1 {
                color: #007BFF;
            }
            h2 {
                color: #28a745;
            }
            h3 {
                color: #dc3545;
            }
            h4 {
                color: #ffc107;
            }
        `;
        setCacheHeaders(res, cacheParam);
        res.writeHead(200, { 'Content-Type': 'text/css' });
        res.end(cssContent);
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('Not Found');
    }
});

server.listen(3000, () => {
    console.log(`Server running at http://localhost:3000/`);
});
